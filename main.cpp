
#include "config.h"
#include "emulate_service.hpp"

#include <map>
#include <string>

void help(const char* prog)
{
    printf("syntax:\n");
    printf("\t%s copy    <service> [object]          ", prog);
    printf("-> copy data from existent service, prints in stdout\n");
    printf("\t%s service [-r] <copied-service-data-file>  => -r make readonly properties", prog);
    printf(" -> create service with data\n");
}

/******* external functions ******/

// clone a service data from a openbmc system (usually a real machine)
//   generates a text file
int clone_service(int argc, char *argv[]);

// creates the service and data with information from a file
//   generated by clone_service()
int emulate_service(char *filename);


int main(int argc, char *argv[])
{
    int ret = 0;
    int readWritePerm = PROPERTY_READWRITE;
    if (argc < 3)
    {
#if defined(DEFAULT_SERVICE_FILE)
#if defined(DEFAULT_SERVICE_READONLY)
            readWritePerm  = PROPERTY_READONLY;
#endif
            ret = emulate_service(DEFAULT_SERVICE_FILE, readWritePerm);
#else
        help(argv[0]);
#endif
    }
    else
    {
        std::string action{argv[1]};
        if (action == "copy")
        {
            ret = clone_service(argc, argv);
        }
        else if (action == "service")
        {
            std::string parameter{argv[2]};
            if (parameter == "-r")
            {
                parameter = argv[3];
                readWritePerm = PROPERTY_READONLY;
            }
#if defined(DEFAULT_SERVICE_READONLY)
            readWritePerm  = PROPERTY_READONLY;
#endif
            ret = emulate_service(parameter.c_str(), readWritePerm);
        }
        else
        {
            help(argv[0]);
        }
    }
    return ret;
}
